{"name":"Restmailer","tagline":"Send emails using REST","body":"REST Mailer\r\n============\r\n\r\n# Background\r\nMy company has an application that performs various jobs upon receiving specifically formatted emails. Testing the application with a usual web client like Gmail or desktop clients like Thunderbird is a hassle and time consuming. So to ease the testing process I've written this app. It lets you send emails using JSON REST requests.\r\n\r\n## Technologies\r\n* Node.js\r\n* Express.js (body-parser, debug)\r\n* Nodemailer\r\n* Async\r\n\r\n# Usage\r\n\r\nFor sending emails you will have to post the required data to the applications designated URL\r\n\r\n## Request\r\n\r\n```yaml\r\nRequest Type: POST\r\nURL: /sendmail/\r\n```\r\n\r\n## Parameters\r\n\r\n| Name    | Type   | Required  | Description              |\r\n| ------- |:------:| ---------:| -----------------------: |\r\n| to      | string | True      | Address of the recipient |\r\n| subject | string | False     | Subject of the email     |\r\n| message | string | False     | Email message            |\r\n| from*   | string | False     | From address             |\r\n\r\n*The from address can be set in both the request parameter and also in the application config. Request parameter takes precedence over config*\r\n\r\n## Sample request data\r\nAn email object\r\n\r\n```json\r\n{\r\n  \"to\": \"address@email.com\",\r\n  \"subject\": \"Test Subject\",\r\n  \"message\": \"This is a test email\"\r\n}\r\n```\r\nFor a successful request you would have to send an array of this object\r\n\r\n```json\r\n[\r\n  {\r\n    \"to\": \"address@email.com\",\r\n    \"subject\": \"Test Subject\",\r\n    \"message\": \"This is a test email\"\r\n  }\r\n]\r\n```\r\n## For sending the same email to multiple addresses\r\n\r\n```json\r\n[\r\n  {\r\n    \"to\": \"address@email.com, address2@email.com\",\r\n    \"subject\": \"Test Subject\",\r\n    \"message\": \"This is a test email\"\r\n  }\r\n]\r\n```\r\n## For sending multiple emails\r\n\r\n```json\r\n[\r\n  {\r\n    \"to\": \"address@email.com\",\r\n    \"subject\": \"Test Subject\",\r\n    \"message\": \"This is a test email\"\r\n  },\r\n  {\r\n    \"to\": \"address2@email.com\",\r\n    \"subject\": \"Test Subject 2\",\r\n    \"message\": \"This is a test email number 2\"\r\n  }\r\n]\r\n```\r\n\r\n## CURL request\r\n\r\nI am assuming you are running the app on port 3000 on localhost\r\n\r\n```bash\r\ncurl -H \"Content-Type: application/json\" -X POST -d '[{\"to\":\"address@email.com\",\"subject\":\"Test Subject\",\"message\":\"This is a test email\"}]' http://localhost:3000/sendmail\r\n```\r\n## Response\r\n\r\nThe response includes all the email objects that were posted with the request. An example response -\r\n\r\n```json\r\n{\r\n  \"status\": \"1 out of 2 request(s) successfully processed. 1 request(s) failed.\",\r\n  \"emails\": [\r\n    {\r\n      \"from\": \"restmailer@email.com\",\r\n      \"to\": \"address@email.com\",\r\n      \"subject\": \"Test\",\r\n      \"time\": \"Mon Sep 14 2015 12:55:10 GMT+0000 (UTC)\",\r\n      \"status\": \"success\"\r\n    },\r\n    {\r\n      \"from\": \"restmailer@email.com\",\r\n      \"subject\": \"Test\",\r\n      \"time\": \"Mon Sep 14 2015 12:55:10 GMT+0000 (UTC)\",\r\n      \"status\": \"failure\",\r\n      \"error\": {\r\n        \"code\": \"EENVELOPE\"\r\n      }\r\n    }\r\n  ]\r\n}\r\n```\r\nAs you can see the response object contains all the email requests (including the failed ones) for better tracking.\r\n\r\n# Deployment (using Docker)\r\n\r\nThe deployment steps are given below\r\n* Clone the repository using the following command\r\n\r\n```bash\r\ngit clone https://github.com/redmoses/restmailer.git\r\n```\r\n* Build the docker image\r\n\r\n```bash\r\n# i'm assuming you've cloned the app in 'restmailer' directory\r\ncd restmailer\r\nmake build\r\n```\r\n* Configure the application with mail information. The application requires 4 values to be pre-configured before it can send emails. They are\r\n```yaml\r\nMAIL_HOST: the SMTP server host\r\nMAIL_PORT: SMTP server port, default value is 25\r\nMAIL_FROM: the SMTP address for the app\r\nMAIL_USER: the SMTP server username\r\nMAIL_PASS: the SMTP server password\r\n```\r\nYou can copy the example config file 'example.conf' to a new file called 'prod.conf'. After that put in your relevant information on this file, replacing the dummy values.\r\n```bash\r\n# i'm assuming you are inside the app directory\r\ncp example.conf prod.conf\r\nvim prod.conf\r\n```\r\n* Run the application with the following command\r\n\r\n```bash\r\nmake start\r\n```\r\n# Management (Docker)\r\n\r\nYou can manage the docker container by using the following Makefile commands\r\n\r\n```bash\r\n# start app\r\nmake start\r\n# stop app\r\nmake stop\r\n# restart app\r\nmake restart\r\n# see logs\r\nmake logs\r\n# shell access\r\nmake shell\r\n```\r\nFeel free to play around with the Makefile and add your own commands if necessary\r\n","google":"UA-46861903-4","note":"Don't delete this file! It's used internally to help with page regeneration."}